# -*- coding: utf-8 -*-
"""blackjack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QZSr1tNJZXiZJ5hVaATlZv-lgEpVDrsT
"""

import random
from random import shuffle

# Kartendeck erzeugen

# warum nicht zahlen? das geht dann später leichter zusammenzuzählen.
# bsp: range / list-comprehention
karten = "11 10 10 10 10 9 8 7 6 5 4 3 2".split()
farben = "Pik Herz Kreuz Karo".split()
# kartendeck = []

# list comprehention:
kartendeck = [karte + " " + farbe for karte in karten for farbe in farben]
"""for karte in karten:
    for farbe in farben:
      kartendeck.append(karte+ " "+ farbe)"""




# Karten Stapel erzeugen
class karten_stapel():
    def __init__(self):
        self.kartendeck = []
        self.mischen(kartendeck)
        self.karte = self.gen_ziehen()

    def mischen(self, kartendeck):
        self.kartendeck = []
        x = [[i] for i in kartendeck]
        shuffle(x)
        self.kartendeck.extend(x)

    def gen_ziehen(self ):
        for i in [i for i in self.kartendeck]:
            yield i

            # gerne erklären

    def __str__(self):
        return str(self.kartendeck)




# Class Spieler
class spieler:
    def __init__(self, karten_stapel=karten_stapel()):
        self.new_cards = []
        self.karte1 = self.flatten(self.ziehen(karten_stapel.karte))
        self.karte2 = self.flatten(self.ziehen(karten_stapel.karte))
        self.karte3 = []
        self.alle_karten = [self.karte2, self.karte1]

    def __str__(self):
        return str(self.alle_karten)

    def third_card(self, karten_stapel):
        y = self.flatten(self.ziehen(karten_stapel.karte))
        self.alle_karten.append(y)
        self.karte3.append(y)

    def ziehen(self, x):
        return next(x)

    def flatten(self, x):
        return int(x[0].split()[0])




# Class Spiel
# wieter und bewertung gehören zum spiel
class Spiel():
    def __init__(self, dealer, spieler1, kartendeck):
        self.kartendeck = kartendeck
        self.dealer = dealer
        self.spieler1 = spieler1

    def __str__(self):
        return str(self.dealer.alle_karten) + " " + str(self.spieler1.alle_karten)


    def weiter(self):
        if sum(self.dealer.alle_karten) < 21 and sum(self.spieler1.alle_karten) < 21:
            return True
        else:
            return False


    def bewertung(self):
        if sum(self.dealer.alle_karten) == 21:
            return ("Abbruch Dealer hat gewonnen")
        elif sum(self.dealer.alle_karten) > 21:
            return ("Abbruch Dealer  hat verloren")
        elif sum(self.spieler1.alle_karten) == 21:
            return ("Abbruch Spieler  hat gewonnen")
        elif sum(self.spieler1.alle_karten) > 21:
            return ("Abbruch Spieler  hat verloren")
        elif sum(self.dealer.alle_karten) > sum(self.spieler1.alle_karten):
            return ("Der Dieler  hat gewonnen")
        elif sum(self.dealer.alle_karten) < sum(self.spieler1.alle_karten):
            return ("Der Spieler  hat gewonnen")
        else:
            pass

    def spielbrett(self):
        while self.weiter() == True:
            print(f"Dealer : {self.dealer.alle_karten} , Du : {self.spieler1.alle_karten}")
            if sum(self.dealer.alle_karten) > 16:
                Dealer_Karten = sum(self.dealer.alle_karten)
            else:
                self.dealer.third_card(self.kartendeck)
                Dealer_Karten = self.dealer.alle_karten
                if self.weiter() == False:
                    break
                print(f"Der Dealer hat nun folgende Karten gezogen {Dealer_Karten}")
            new_spieler_card = input("möchtest du noch eine karte ziehen? ja/nein")
            if new_spieler_card == "ja":
                Spieler_Karten = self.spieler1.third_card(self.kartendeck)
                self.weiter()
                print(f"Dealer : {self.dealer.alle_karten} , Du nach dem karte ziehen: {self.spieler1.alle_karten}")
            else:
                Dealer_Karten = sum(self.spieler1.alle_karten)
                break
        #print(bewertung(v))
        print(self)

# dealer wird zu spieler 1
v = Spiel(spieler(karten_stapel=karten_stapel()), spieler(karten_stapel=karten_stapel()), karten_stapel())
v.spielbrett()

